// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.dji_log_parser_binding

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_dji_log_parser_binding_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_dji_log_parser_binding_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "dji_log_parser_binding"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}










































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_details(
): Short
fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_fetch_keychains(
): Short
fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_frames(
): Short
fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_keychains_request(
): Short
fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_records(
): Short
fun uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_version(
): Short
fun uniffi_dji_log_parser_binding_checksum_constructor_djilogwrapper_from_bytes(
): Short
fun ffi_dji_log_parser_binding_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "dji_log_parser_binding"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_dji_log_parser_binding_fn_clone_djilogwrapper(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_dji_log_parser_binding_fn_free_djilogwrapper(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_dji_log_parser_binding_fn_constructor_djilogwrapper_from_bytes(`bytes`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_details(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_fetch_keychains(`ptr`: Pointer,`apiKey`: RustBuffer.ByValue,`departmentWrapper`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_frames(`ptr`: Pointer,`keychains`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_keychains_request(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_records(`ptr`: Pointer,`keychains`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_dji_log_parser_binding_fn_method_djilogwrapper_version(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_dji_log_parser_binding_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_dji_log_parser_binding_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_dji_log_parser_binding_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_dji_log_parser_binding_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_dji_log_parser_binding_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_dji_log_parser_binding_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_dji_log_parser_binding_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_dji_log_parser_binding_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_dji_log_parser_binding_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_dji_log_parser_binding_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_dji_log_parser_binding_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_dji_log_parser_binding_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_dji_log_parser_binding_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_dji_log_parser_binding_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_dji_log_parser_binding_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_dji_log_parser_binding_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_dji_log_parser_binding_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_dji_log_parser_binding_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_dji_log_parser_binding_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_details() != 40372.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_fetch_keychains() != 47598.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_frames() != 37871.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_keychains_request() != 8643.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_records() != 47140.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_method_djilogwrapper_version() != 42293.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dji_log_parser_binding_checksum_constructor_djilogwrapper_from_bytes() != 50341.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4UL

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8UL

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * A wrapper around the DJI log parser for Kotlin bindings
 */
public interface DjiLogWrapperInterface {
    
    /**
     * Get details about the log
     */
    fun `details`(): DetailsWrapper
    
    /**
     * Fetches keychains using the provided API key
     */
    fun `fetchKeychains`(`apiKey`: kotlin.String, `departmentWrapper`: DepartmentWrapper): List<List<KeychainFeaturePointWrapper>>
    
    /**
     * Retrieves the normalized frames from the DJI log
     */
    fun `frames`(`keychains`: List<List<KeychainFeaturePointWrapper>>?): List<FrameWrapper>
    
    /**
     * Creates a KeychainsRequest object by parsing KeyStorage records
     */
    fun `keychainsRequest`(): KeychainsRequestWrapper
    
    /**
     * Retrieves the parsed raw records from the DJI log
     */
    fun `records`(`keychains`: List<List<KeychainFeaturePointWrapper>>?): List<RecordWrapper>
    
    /**
     * Get the log format version
     */
    fun `version`(): kotlin.UByte
    
    companion object
}

/**
 * A wrapper around the DJI log parser for Kotlin bindings
 */
open class DjiLogWrapper: Disposable, AutoCloseable, DjiLogWrapperInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_free_djilogwrapper(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_clone_djilogwrapper(pointer!!, status)
        }
    }

    
    /**
     * Get details about the log
     */override fun `details`(): DetailsWrapper {
            return FfiConverterTypeDetailsWrapper.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_details(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Fetches keychains using the provided API key
     */
    @Throws(DjiException::class)override fun `fetchKeychains`(`apiKey`: kotlin.String, `departmentWrapper`: DepartmentWrapper): List<List<KeychainFeaturePointWrapper>> {
            return FfiConverterSequenceSequenceTypeKeychainFeaturePointWrapper.lift(
    callWithPointer {
    uniffiRustCallWithError(DjiException) { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_fetch_keychains(
        it, FfiConverterString.lower(`apiKey`),FfiConverterTypeDepartmentWrapper.lower(`departmentWrapper`),_status)
}
    }
    )
    }
    

    
    /**
     * Retrieves the normalized frames from the DJI log
     */
    @Throws(DjiException::class)override fun `frames`(`keychains`: List<List<KeychainFeaturePointWrapper>>?): List<FrameWrapper> {
            return FfiConverterSequenceTypeFrameWrapper.lift(
    callWithPointer {
    uniffiRustCallWithError(DjiException) { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_frames(
        it, FfiConverterOptionalSequenceSequenceTypeKeychainFeaturePointWrapper.lower(`keychains`),_status)
}
    }
    )
    }
    

    
    /**
     * Creates a KeychainsRequest object by parsing KeyStorage records
     */
    @Throws(DjiException::class)override fun `keychainsRequest`(): KeychainsRequestWrapper {
            return FfiConverterTypeKeychainsRequestWrapper.lift(
    callWithPointer {
    uniffiRustCallWithError(DjiException) { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_keychains_request(
        it, _status)
}
    }
    )
    }
    

    
    /**
     * Retrieves the parsed raw records from the DJI log
     */
    @Throws(DjiException::class)override fun `records`(`keychains`: List<List<KeychainFeaturePointWrapper>>?): List<RecordWrapper> {
            return FfiConverterSequenceTypeRecordWrapper.lift(
    callWithPointer {
    uniffiRustCallWithError(DjiException) { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_records(
        it, FfiConverterOptionalSequenceSequenceTypeKeychainFeaturePointWrapper.lower(`keychains`),_status)
}
    }
    )
    }
    

    
    /**
     * Get the log format version
     */override fun `version`(): kotlin.UByte {
            return FfiConverterUByte.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_method_djilogwrapper_version(
        it, _status)
}
    }
    )
    }
    

    

    
    companion object {
        
    /**
     * Constructs a `DJILog` from an array of bytes.
     *
     * This function parses the Prefix and Info blocks of the log file,
     * and handles different versions of the log format.
     */
    @Throws(DjiException::class) fun `fromBytes`(`bytes`: kotlin.ByteArray): DjiLogWrapper {
            return FfiConverterTypeDJILogWrapper.lift(
    uniffiRustCallWithError(DjiException) { _status ->
    UniffiLib.INSTANCE.uniffi_dji_log_parser_binding_fn_constructor_djilogwrapper_from_bytes(
        FfiConverterByteArray.lower(`bytes`),_status)
}
    )
    }
    

        
    }
    
}

/**
 * @suppress
 */
public object FfiConverterTypeDJILogWrapper: FfiConverter<DjiLogWrapper, Pointer> {

    override fun lower(value: DjiLogWrapper): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): DjiLogWrapper {
        return DjiLogWrapper(value)
    }

    override fun read(buf: ByteBuffer): DjiLogWrapper {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: DjiLogWrapper) = 8UL

    override fun write(value: DjiLogWrapper, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class DetailsWrapper (
    var `subStreet`: kotlin.String, 
    var `street`: kotlin.String, 
    var `city`: kotlin.String, 
    var `area`: kotlin.String, 
    var `isFavorite`: kotlin.UByte, 
    var `isNew`: kotlin.UByte, 
    var `needsUpload`: kotlin.UByte, 
    var `recordLineCount`: kotlin.Int, 
    var `detailInfoChecksum`: kotlin.Int, 
    var `startTime`: kotlin.String, 
    var `longitude`: kotlin.Double, 
    var `latitude`: kotlin.Double, 
    var `totalDistance`: kotlin.Float, 
    var `totalTime`: kotlin.Double, 
    var `maxHeight`: kotlin.Float, 
    var `maxHorizontalSpeed`: kotlin.Float, 
    var `maxVerticalSpeed`: kotlin.Float, 
    var `aircraftName`: kotlin.String, 
    var `aircraftSn`: kotlin.String, 
    var `cameraSn`: kotlin.String, 
    var `rcSn`: kotlin.String, 
    var `batterySn`: kotlin.String, 
    var `appPlatform`: PlatformWrapper, 
    var `appVersion`: kotlin.String, 
    var `productType`: ProductTypeWrapper
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeDetailsWrapper: FfiConverterRustBuffer<DetailsWrapper> {
    override fun read(buf: ByteBuffer): DetailsWrapper {
        return DetailsWrapper(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypePlatformWrapper.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeProductTypeWrapper.read(buf),
        )
    }

    override fun allocationSize(value: DetailsWrapper) = (
            FfiConverterString.allocationSize(value.`subStreet`) +
            FfiConverterString.allocationSize(value.`street`) +
            FfiConverterString.allocationSize(value.`city`) +
            FfiConverterString.allocationSize(value.`area`) +
            FfiConverterUByte.allocationSize(value.`isFavorite`) +
            FfiConverterUByte.allocationSize(value.`isNew`) +
            FfiConverterUByte.allocationSize(value.`needsUpload`) +
            FfiConverterInt.allocationSize(value.`recordLineCount`) +
            FfiConverterInt.allocationSize(value.`detailInfoChecksum`) +
            FfiConverterString.allocationSize(value.`startTime`) +
            FfiConverterDouble.allocationSize(value.`longitude`) +
            FfiConverterDouble.allocationSize(value.`latitude`) +
            FfiConverterFloat.allocationSize(value.`totalDistance`) +
            FfiConverterDouble.allocationSize(value.`totalTime`) +
            FfiConverterFloat.allocationSize(value.`maxHeight`) +
            FfiConverterFloat.allocationSize(value.`maxHorizontalSpeed`) +
            FfiConverterFloat.allocationSize(value.`maxVerticalSpeed`) +
            FfiConverterString.allocationSize(value.`aircraftName`) +
            FfiConverterString.allocationSize(value.`aircraftSn`) +
            FfiConverterString.allocationSize(value.`cameraSn`) +
            FfiConverterString.allocationSize(value.`rcSn`) +
            FfiConverterString.allocationSize(value.`batterySn`) +
            FfiConverterTypePlatformWrapper.allocationSize(value.`appPlatform`) +
            FfiConverterString.allocationSize(value.`appVersion`) +
            FfiConverterTypeProductTypeWrapper.allocationSize(value.`productType`)
    )

    override fun write(value: DetailsWrapper, buf: ByteBuffer) {
            FfiConverterString.write(value.`subStreet`, buf)
            FfiConverterString.write(value.`street`, buf)
            FfiConverterString.write(value.`city`, buf)
            FfiConverterString.write(value.`area`, buf)
            FfiConverterUByte.write(value.`isFavorite`, buf)
            FfiConverterUByte.write(value.`isNew`, buf)
            FfiConverterUByte.write(value.`needsUpload`, buf)
            FfiConverterInt.write(value.`recordLineCount`, buf)
            FfiConverterInt.write(value.`detailInfoChecksum`, buf)
            FfiConverterString.write(value.`startTime`, buf)
            FfiConverterDouble.write(value.`longitude`, buf)
            FfiConverterDouble.write(value.`latitude`, buf)
            FfiConverterFloat.write(value.`totalDistance`, buf)
            FfiConverterDouble.write(value.`totalTime`, buf)
            FfiConverterFloat.write(value.`maxHeight`, buf)
            FfiConverterFloat.write(value.`maxHorizontalSpeed`, buf)
            FfiConverterFloat.write(value.`maxVerticalSpeed`, buf)
            FfiConverterString.write(value.`aircraftName`, buf)
            FfiConverterString.write(value.`aircraftSn`, buf)
            FfiConverterString.write(value.`cameraSn`, buf)
            FfiConverterString.write(value.`rcSn`, buf)
            FfiConverterString.write(value.`batterySn`, buf)
            FfiConverterTypePlatformWrapper.write(value.`appPlatform`, buf)
            FfiConverterString.write(value.`appVersion`, buf)
            FfiConverterTypeProductTypeWrapper.write(value.`productType`, buf)
    }
}



data class EncodedKeychainFeaturePointWrapper (
    var `featurePoint`: kotlin.UInt, 
    var `aesCiphertext`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEncodedKeychainFeaturePointWrapper: FfiConverterRustBuffer<EncodedKeychainFeaturePointWrapper> {
    override fun read(buf: ByteBuffer): EncodedKeychainFeaturePointWrapper {
        return EncodedKeychainFeaturePointWrapper(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: EncodedKeychainFeaturePointWrapper) = (
            FfiConverterUInt.allocationSize(value.`featurePoint`) +
            FfiConverterString.allocationSize(value.`aesCiphertext`)
    )

    override fun write(value: EncodedKeychainFeaturePointWrapper, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`featurePoint`, buf)
            FfiConverterString.write(value.`aesCiphertext`, buf)
    }
}



data class FrameWrapper (
    var `flyTime`: kotlin.Float, 
    var `latitude`: kotlin.Double, 
    var `longitude`: kotlin.Double, 
    var `altitude`: kotlin.Float, 
    var `height`: kotlin.Float, 
    var `xSpeed`: kotlin.Float, 
    var `ySpeed`: kotlin.Float, 
    var `zSpeed`: kotlin.Float, 
    var `pitch`: kotlin.Float, 
    var `roll`: kotlin.Float, 
    var `yaw`: kotlin.Float, 
    var `gpsNum`: kotlin.UByte, 
    var `gimbalPitch`: kotlin.Float, 
    var `gimbalRoll`: kotlin.Float, 
    var `gimbalYaw`: kotlin.Float, 
    var `isRecording`: kotlin.Boolean, 
    var `isTakingPhoto`: kotlin.Boolean, 
    var `aileron`: kotlin.UShort, 
    var `elevator`: kotlin.UShort, 
    var `throttle`: kotlin.UShort, 
    var `rudder`: kotlin.UShort, 
    var `batteryPercent`: kotlin.UByte, 
    var `batteryVoltage`: kotlin.Float, 
    var `batteryCurrent`: kotlin.Float, 
    var `batteryTemperature`: kotlin.Float, 
    var `cellVoltages`: List<kotlin.Float>, 
    var `homeLatitude`: kotlin.Double, 
    var `homeLongitude`: kotlin.Double, 
    var `homeAltitude`: kotlin.Float
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFrameWrapper: FfiConverterRustBuffer<FrameWrapper> {
    override fun read(buf: ByteBuffer): FrameWrapper {
        return FrameWrapper(
            FfiConverterFloat.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterSequenceFloat.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterFloat.read(buf),
        )
    }

    override fun allocationSize(value: FrameWrapper) = (
            FfiConverterFloat.allocationSize(value.`flyTime`) +
            FfiConverterDouble.allocationSize(value.`latitude`) +
            FfiConverterDouble.allocationSize(value.`longitude`) +
            FfiConverterFloat.allocationSize(value.`altitude`) +
            FfiConverterFloat.allocationSize(value.`height`) +
            FfiConverterFloat.allocationSize(value.`xSpeed`) +
            FfiConverterFloat.allocationSize(value.`ySpeed`) +
            FfiConverterFloat.allocationSize(value.`zSpeed`) +
            FfiConverterFloat.allocationSize(value.`pitch`) +
            FfiConverterFloat.allocationSize(value.`roll`) +
            FfiConverterFloat.allocationSize(value.`yaw`) +
            FfiConverterUByte.allocationSize(value.`gpsNum`) +
            FfiConverterFloat.allocationSize(value.`gimbalPitch`) +
            FfiConverterFloat.allocationSize(value.`gimbalRoll`) +
            FfiConverterFloat.allocationSize(value.`gimbalYaw`) +
            FfiConverterBoolean.allocationSize(value.`isRecording`) +
            FfiConverterBoolean.allocationSize(value.`isTakingPhoto`) +
            FfiConverterUShort.allocationSize(value.`aileron`) +
            FfiConverterUShort.allocationSize(value.`elevator`) +
            FfiConverterUShort.allocationSize(value.`throttle`) +
            FfiConverterUShort.allocationSize(value.`rudder`) +
            FfiConverterUByte.allocationSize(value.`batteryPercent`) +
            FfiConverterFloat.allocationSize(value.`batteryVoltage`) +
            FfiConverterFloat.allocationSize(value.`batteryCurrent`) +
            FfiConverterFloat.allocationSize(value.`batteryTemperature`) +
            FfiConverterSequenceFloat.allocationSize(value.`cellVoltages`) +
            FfiConverterDouble.allocationSize(value.`homeLatitude`) +
            FfiConverterDouble.allocationSize(value.`homeLongitude`) +
            FfiConverterFloat.allocationSize(value.`homeAltitude`)
    )

    override fun write(value: FrameWrapper, buf: ByteBuffer) {
            FfiConverterFloat.write(value.`flyTime`, buf)
            FfiConverterDouble.write(value.`latitude`, buf)
            FfiConverterDouble.write(value.`longitude`, buf)
            FfiConverterFloat.write(value.`altitude`, buf)
            FfiConverterFloat.write(value.`height`, buf)
            FfiConverterFloat.write(value.`xSpeed`, buf)
            FfiConverterFloat.write(value.`ySpeed`, buf)
            FfiConverterFloat.write(value.`zSpeed`, buf)
            FfiConverterFloat.write(value.`pitch`, buf)
            FfiConverterFloat.write(value.`roll`, buf)
            FfiConverterFloat.write(value.`yaw`, buf)
            FfiConverterUByte.write(value.`gpsNum`, buf)
            FfiConverterFloat.write(value.`gimbalPitch`, buf)
            FfiConverterFloat.write(value.`gimbalRoll`, buf)
            FfiConverterFloat.write(value.`gimbalYaw`, buf)
            FfiConverterBoolean.write(value.`isRecording`, buf)
            FfiConverterBoolean.write(value.`isTakingPhoto`, buf)
            FfiConverterUShort.write(value.`aileron`, buf)
            FfiConverterUShort.write(value.`elevator`, buf)
            FfiConverterUShort.write(value.`throttle`, buf)
            FfiConverterUShort.write(value.`rudder`, buf)
            FfiConverterUByte.write(value.`batteryPercent`, buf)
            FfiConverterFloat.write(value.`batteryVoltage`, buf)
            FfiConverterFloat.write(value.`batteryCurrent`, buf)
            FfiConverterFloat.write(value.`batteryTemperature`, buf)
            FfiConverterSequenceFloat.write(value.`cellVoltages`, buf)
            FfiConverterDouble.write(value.`homeLatitude`, buf)
            FfiConverterDouble.write(value.`homeLongitude`, buf)
            FfiConverterFloat.write(value.`homeAltitude`, buf)
    }
}



data class KeychainFeaturePointWrapper (
    var `featurePoint`: kotlin.UInt, 
    var `aesKey`: kotlin.String, 
    var `aesIv`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeKeychainFeaturePointWrapper: FfiConverterRustBuffer<KeychainFeaturePointWrapper> {
    override fun read(buf: ByteBuffer): KeychainFeaturePointWrapper {
        return KeychainFeaturePointWrapper(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: KeychainFeaturePointWrapper) = (
            FfiConverterUInt.allocationSize(value.`featurePoint`) +
            FfiConverterString.allocationSize(value.`aesKey`) +
            FfiConverterString.allocationSize(value.`aesIv`)
    )

    override fun write(value: KeychainFeaturePointWrapper, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`featurePoint`, buf)
            FfiConverterString.write(value.`aesKey`, buf)
            FfiConverterString.write(value.`aesIv`, buf)
    }
}



data class KeychainsRequestWrapper (
    var `version`: kotlin.UShort, 
    var `department`: kotlin.UByte, 
    var `keychains`: List<List<EncodedKeychainFeaturePointWrapper>>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeKeychainsRequestWrapper: FfiConverterRustBuffer<KeychainsRequestWrapper> {
    override fun read(buf: ByteBuffer): KeychainsRequestWrapper {
        return KeychainsRequestWrapper(
            FfiConverterUShort.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterSequenceSequenceTypeEncodedKeychainFeaturePointWrapper.read(buf),
        )
    }

    override fun allocationSize(value: KeychainsRequestWrapper) = (
            FfiConverterUShort.allocationSize(value.`version`) +
            FfiConverterUByte.allocationSize(value.`department`) +
            FfiConverterSequenceSequenceTypeEncodedKeychainFeaturePointWrapper.allocationSize(value.`keychains`)
    )

    override fun write(value: KeychainsRequestWrapper, buf: ByteBuffer) {
            FfiConverterUShort.write(value.`version`, buf)
            FfiConverterUByte.write(value.`department`, buf)
            FfiConverterSequenceSequenceTypeEncodedKeychainFeaturePointWrapper.write(value.`keychains`, buf)
    }
}



data class RecordWrapper (
    var `recordType`: kotlin.String, 
    var `timestamp`: kotlin.ULong, 
    var `data`: kotlin.ByteArray
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeRecordWrapper: FfiConverterRustBuffer<RecordWrapper> {
    override fun read(buf: ByteBuffer): RecordWrapper {
        return RecordWrapper(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: RecordWrapper) = (
            FfiConverterString.allocationSize(value.`recordType`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterByteArray.allocationSize(value.`data`)
    )

    override fun write(value: RecordWrapper, buf: ByteBuffer) {
            FfiConverterString.write(value.`recordType`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterByteArray.write(value.`data`, buf)
    }
}





sealed class DjiException: kotlin.Exception() {
    
    class ParseException(
        ) : DjiException() {
        override val message
            get() = ""
    }
    
    class KeychainException(
        ) : DjiException() {
        override val message
            get() = ""
    }
    
    class RecordException(
        ) : DjiException() {
        override val message
            get() = ""
    }
    
    class FrameException(
        ) : DjiException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DjiException> {
        override fun lift(error_buf: RustBuffer.ByValue): DjiException = FfiConverterTypeDJIError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeDJIError : FfiConverterRustBuffer<DjiException> {
    override fun read(buf: ByteBuffer): DjiException {
        

        return when(buf.getInt()) {
            1 -> DjiException.ParseException()
            2 -> DjiException.KeychainException()
            3 -> DjiException.RecordException()
            4 -> DjiException.FrameException()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DjiException): ULong {
        return when(value) {
            is DjiException.ParseException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DjiException.KeychainException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DjiException.RecordException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DjiException.FrameException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: DjiException, buf: ByteBuffer) {
        when(value) {
            is DjiException.ParseException -> {
                buf.putInt(1)
                Unit
            }
            is DjiException.KeychainException -> {
                buf.putInt(2)
                Unit
            }
            is DjiException.RecordException -> {
                buf.putInt(3)
                Unit
            }
            is DjiException.FrameException -> {
                buf.putInt(4)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class DepartmentWrapper {
    
    SDK,
    DJIGO,
    DJI_FLY,
    AGRICULTURAL_MACHINERY,
    TERRA,
    DJI_GLASSES,
    DJI_PILOT,
    GS_PRO,
    UNKNOWN;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeDepartmentWrapper: FfiConverterRustBuffer<DepartmentWrapper> {
    override fun read(buf: ByteBuffer) = try {
        DepartmentWrapper.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: DepartmentWrapper) = 4UL

    override fun write(value: DepartmentWrapper, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PlatformWrapper {
    
    IOS,
    ANDROID,
    DJI_FLY,
    WINDOWS,
    MAC,
    LINUX,
    UNKNOWN;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypePlatformWrapper: FfiConverterRustBuffer<PlatformWrapper> {
    override fun read(buf: ByteBuffer) = try {
        PlatformWrapper.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PlatformWrapper) = 4UL

    override fun write(value: PlatformWrapper, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ProductTypeWrapper {
    
    NONE,
    INSPIRE1,
    PHANTOM3_STANDARD,
    PHANTOM3_ADVANCED,
    PHANTOM3_PRO,
    OSMO,
    MATRICE100,
    PHANTOM4,
    LB2,
    INSPIRE1_PRO,
    A3,
    MATRICE600,
    PHANTOM34_K,
    MAVIC_PRO,
    ZENMUSE_XT,
    UNKNOWN;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeProductTypeWrapper: FfiConverterRustBuffer<ProductTypeWrapper> {
    override fun read(buf: ByteBuffer) = try {
        ProductTypeWrapper.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ProductTypeWrapper) = 4UL

    override fun write(value: ProductTypeWrapper, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalSequenceSequenceTypeKeychainFeaturePointWrapper: FfiConverterRustBuffer<List<List<KeychainFeaturePointWrapper>>?> {
    override fun read(buf: ByteBuffer): List<List<KeychainFeaturePointWrapper>>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceSequenceTypeKeychainFeaturePointWrapper.read(buf)
    }

    override fun allocationSize(value: List<List<KeychainFeaturePointWrapper>>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceSequenceTypeKeychainFeaturePointWrapper.allocationSize(value)
        }
    }

    override fun write(value: List<List<KeychainFeaturePointWrapper>>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceSequenceTypeKeychainFeaturePointWrapper.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceFloat: FfiConverterRustBuffer<List<kotlin.Float>> {
    override fun read(buf: ByteBuffer): List<kotlin.Float> {
        val len = buf.getInt()
        return List<kotlin.Float>(len) {
            FfiConverterFloat.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.Float>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterFloat.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.Float>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterFloat.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEncodedKeychainFeaturePointWrapper: FfiConverterRustBuffer<List<EncodedKeychainFeaturePointWrapper>> {
    override fun read(buf: ByteBuffer): List<EncodedKeychainFeaturePointWrapper> {
        val len = buf.getInt()
        return List<EncodedKeychainFeaturePointWrapper>(len) {
            FfiConverterTypeEncodedKeychainFeaturePointWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<EncodedKeychainFeaturePointWrapper>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEncodedKeychainFeaturePointWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<EncodedKeychainFeaturePointWrapper>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEncodedKeychainFeaturePointWrapper.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeFrameWrapper: FfiConverterRustBuffer<List<FrameWrapper>> {
    override fun read(buf: ByteBuffer): List<FrameWrapper> {
        val len = buf.getInt()
        return List<FrameWrapper>(len) {
            FfiConverterTypeFrameWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<FrameWrapper>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFrameWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FrameWrapper>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFrameWrapper.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeKeychainFeaturePointWrapper: FfiConverterRustBuffer<List<KeychainFeaturePointWrapper>> {
    override fun read(buf: ByteBuffer): List<KeychainFeaturePointWrapper> {
        val len = buf.getInt()
        return List<KeychainFeaturePointWrapper>(len) {
            FfiConverterTypeKeychainFeaturePointWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<KeychainFeaturePointWrapper>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeKeychainFeaturePointWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<KeychainFeaturePointWrapper>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeKeychainFeaturePointWrapper.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeRecordWrapper: FfiConverterRustBuffer<List<RecordWrapper>> {
    override fun read(buf: ByteBuffer): List<RecordWrapper> {
        val len = buf.getInt()
        return List<RecordWrapper>(len) {
            FfiConverterTypeRecordWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<RecordWrapper>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRecordWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RecordWrapper>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRecordWrapper.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceSequenceTypeEncodedKeychainFeaturePointWrapper: FfiConverterRustBuffer<List<List<EncodedKeychainFeaturePointWrapper>>> {
    override fun read(buf: ByteBuffer): List<List<EncodedKeychainFeaturePointWrapper>> {
        val len = buf.getInt()
        return List<List<EncodedKeychainFeaturePointWrapper>>(len) {
            FfiConverterSequenceTypeEncodedKeychainFeaturePointWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<List<EncodedKeychainFeaturePointWrapper>>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterSequenceTypeEncodedKeychainFeaturePointWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<List<EncodedKeychainFeaturePointWrapper>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterSequenceTypeEncodedKeychainFeaturePointWrapper.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceSequenceTypeKeychainFeaturePointWrapper: FfiConverterRustBuffer<List<List<KeychainFeaturePointWrapper>>> {
    override fun read(buf: ByteBuffer): List<List<KeychainFeaturePointWrapper>> {
        val len = buf.getInt()
        return List<List<KeychainFeaturePointWrapper>>(len) {
            FfiConverterSequenceTypeKeychainFeaturePointWrapper.read(buf)
        }
    }

    override fun allocationSize(value: List<List<KeychainFeaturePointWrapper>>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterSequenceTypeKeychainFeaturePointWrapper.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<List<KeychainFeaturePointWrapper>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterSequenceTypeKeychainFeaturePointWrapper.write(it, buf)
        }
    }
}

